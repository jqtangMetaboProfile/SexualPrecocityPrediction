raw_data <- read.csv('C:/Users/ML/Documents/TJQProjects/sexual_precocity/summary_table.csv', stringsAsFactors = F)
raw_data <- raw_data[!names(raw_data)%in%c('Bsae.LH','Base.FSH','Peak.LH','Peak.FSH', 'Peak.LH.FSH')]
raw_data <- raw_data[-c(length(raw_data), length(raw_data)-1)]
#----------------preprocessing--------------------------#
raw_data$Breast <- gsub("B","",raw_data$Breast)
fuzzy_id <- grep('-', raw_data$Breast)
raw_data$Breast[fuzzy_id] <- sapply(strsplit(raw_data$Breast[fuzzy_id], split = '-'), function(x) mean(as.numeric(x)))
raw_data$Breast <- as.numeric(raw_data$Breast)
rm(fuzzy_id)
for(var in c('BA', 'BA.CA', 'Uterus.AP', 'Right.Ovary.volume', 'Right.Ovary.AP', 'T', 'E2')) {
raw_data[[var]] <- as.numeric(raw_data[[var]])
}
rm(var)
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/GPU"
options(repos = cran)
install.packages("mxnet")
install.packages("drat")
drat::addRepo("dmlc")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/GPU"
options(repos = cran)
install.packages("mxnet")
install.packages("drat")
cran["dmlc"] <- "https://s3-us-west-2.amazonaws.com/apache-mxnet/R/CRAN/GPU"
options(repos = cran)
install.packages("mxnet")
options(digits = .5)
write.csv(t(apply(train.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !train.y], na.omit(x)[train.y])$p.value
)
})), 'train.x.csv')
exp_path <- 'C:/Users/ML/Documents/TJQProjects/sexual_precocity'
data_path <- paste(exp_path, 'local_data', sep = '/')
setwd(exp_path)
source('classes/SexualPrecocityClassification.R')
sexual_precocity <- SexualPrecocityClassification$new(exp_path, data_path)
sexual_precocity$setUseless('NO','Bsae.LH','Base.FSH','Peak.LH',
'Peak.FSH', 'Peak.LH.FSH', 'X', 'X.1')
sexual_precocity$preprocess(filename = 'summary_table.csv', na.rm = F)
sexual_precocity$setLabel(label = 'Group')
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
options(digits = .5)
write.csv(t(apply(train.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !train.y], na.omit(x)[train.y])$p.value
)
})), 'train.x.csv')
options(digits = 5)
write.csv(t(apply(train.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !train.y], na.omit(x)[train.y])$p.value
)
})), 'train.x.csv')
write.csv(t(apply(train.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !train.y], na.omit(x)[train.y])$p.value
)
})), 'train.x.csv')
write.csv(t(apply(test.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !test.y], na.omit(x)[test.y])$p.value
)
})), 'test.x.csv')
sexual_precocity$normalize('z_score',train.x)
train.x
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
train.x.normalized
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
exp_path <- 'C:/Users/ML/Documents/TJQProjects/sexual_precocity'
data_path <- paste(exp_path, 'local_data', sep = '/')
setwd(exp_path)
source('classes/SexualPrecocityClassification.R')
sexual_precocity <- SexualPrecocityClassification$new(exp_path, data_path)
sexual_precocity$setUseless('NO','Bsae.LH','Base.FSH','Peak.LH',
'Peak.FSH', 'Peak.LH.FSH', 'X', 'X.1')
sexual_precocity$preprocess(filename = 'summary_table.csv', na.rm = F)
sexual_precocity$setLabel(label = 'Group')
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
exp_path <- 'C:/Users/ML/Documents/TJQProjects/sexual_precocity'
data_path <- paste(exp_path, 'local_data', sep = '/')
setwd(exp_path)
source('classes/SexualPrecocityClassification.R')
sexual_precocity <- SexualPrecocityClassification$new(exp_path, data_path)
sexual_precocity$setUseless('NO','Bsae.LH','Base.FSH','Peak.LH',
'Peak.FSH', 'Peak.LH.FSH', 'X', 'X.1')
sexual_precocity$preprocess(filename = 'summary_table.csv', na.rm = F)
sexual_precocity$setLabel(label = 'Group')
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
sexual_precocity$setPartition(data = sexual_precocity$preprocessed_data, .7)
train.x <- sexual_precocity$train.x
train.y <- sexual_precocity$train.y
test.x <- sexual_precocity$test.x
test.y <- sexual_precocity$test.y
train.x.normalized <- sexual_precocity$normalize('z_score',train.x)
test.x.normalized <-sexual_precocity$normalize('z_score', test.x)
model <- sexual_precocity$train(model_type = 'logistic', train.x.normalized, train.y)
summary(model)
write.csv(t(apply(train.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !train.y], na.omit(x)[train.y])$p.value
)
})), 'train.x.csv')
write.csv(t(apply(test.x[,-1], 2, function(x) {
c(
sum(!is.na(x)),
mean(x, na.rm = T),
sd(x, na.rm = T),
median(x, na.rm = T),
sqrt(var(x,na.rm=TRUE)/sum(!is.na(x))),
wilcox.test(na.omit(x)[ !test.y], na.omit(x)[test.y])$p.value
)
})), 'test.x.csv')
score.y <- sexual_precocity$predict(model, test.x.normalized, output_type = 'score')
rm(score.y)
train.score <- sexual_precocity$predict(model, train.x.normalized, output_type = 'score')
test.score <- sexual_precocity$predict(model, test.x.normalized, output_type = 'score')
train.score
test.score
?legend
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(test.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
train.score <- sexual_precocity$predict(model, train.x.normalized, output_type = 'score')
test.score <- sexual_precocity$predict(model, test.x.normalized, output_type = 'score')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
source('classes/SexualPrecocityClassification.R')
sexual_precocity$evaluate(train.y, train.score, indicators = list('global_auc'))
sexual_precocity$evaluate(test.y, test.score, indicators = list('global_auc'))
boxplot(train.score~train.y,col=c("darkgrey","orange"),outline=F,main="Y score",names=c("No","Yes"))
boxplot(test.score~test.y,col=c("darkgrey","orange"),outline=F,main="Y score",names=c("No","Yes"))
sum(!is.na(test.score))
result <- ROCR::prediction(private$predicted_value, private$real_value)
res <- ROCR::performance(result, 'sens', 'spec')
sens <- slot(res, 'y.values')[[1]]
spec <- slot(res, 'x.values')[[1]]
alpha <- slot(res, 'alpha.values')[[1]]
summary(sens)
summary(spec)
summary(alpha)
result <- ROCR::prediction(test.score, test.y)
res <- ROCR::performance(result, 'sens', 'spec')
sens <- slot(res, 'y.values')[[1]]
spec <- slot(res, 'x.values')[[1]]
alpha <- slot(res, 'alpha.values')[[1]]
summary(sens)
summary(spec)
summary(alpha)
table(test.y)
train.score>0.795
test.score>0.795
table(test.y, test.score>0.795)
table(test.score>0.795)
table(test.score>0.795, test.y)
table(test.score>0.70, test.y)
table(test.score>0.795, test.y)
result <- ROCR::prediction(test.score, test.y)
res <- ROCR::performance(result, 'sens', 'spec')
sens <- slot(res, 'y.values')[[1]]
spec <- slot(res, 'x.values')[[1]]
alpha <- slot(res, 'alpha.values')[[1]]
summary(sens)
summary(spec)
summary(alpha)
library(pROC)
res
install.packages(pROC)
install.packages('pROC')
?pROC::roc
pROC::roc(test.y, test.score)
result <- pROC::roc(test.y, test.score)
plot(result)
?pROC::roc
result <- pROC::roc(test.y, test.score, ci = T)
result
plot(result)
?pROC::plot.roc
result$ci
?ROCR::performance
?pROC::ci
roc <- pROC::roc(test.y, test.score, ci = T)
roc$
pROC::ci()
result$
plot(result)
roc$sensitivities
mean(roc$sensitivities)
mean(roc$)
mean(roc$specificities)
mean(roc$thresholds)
roc$thresholds
roc$sensitivities
roc <- pROC::roc(test.y, test.score, ci = T)
mean(roc$sensitivities[-c(1, length(roc$sensitivities))])
mean(roc$specificities[-c(1, length(roc$specificities))])
mean(roc$thresholds[-c(1, length(roc$thresholds))])
pROC::ci(roc, of = c('se', 'sp', 'thresholds'))
pROC::ci(roc, of = 'se')
pROC::ci.se(roc)
cise <- pROC::ci.se(roc)
cise
rm(cise)
cise <- pROC::ci.se(roc)
plot(cise)
mse <- mean(roc$sensitivities[-c(1, length(roc$sensitivities))])
msp <- mean(roc$specificities[-c(1, length(roc$specificities))])
mthrehold <- mean(roc$thresholds[-c(1, length(roc$thresholds))])
rm(mthrehold)
mthreshold <- mean(roc$thresholds[-c(1, length(roc$thresholds))])
cise <- pROC::ci.se(roc, specificities = mse)
cise
mse
roc <- pROC::roc(test.y, test.score, ci = T)
mse <- mean(roc$sensitivities[-c(1, length(roc$sensitivities))])
msp <- mean(roc$specificities[-c(1, length(roc$specificities))])
mthreshold <- mean(roc$thresholds[-c(1, length(roc$thresholds))])
pROC::ci.se(roc, specificities = mse)
pROC::ci.sp(roc, specificities = msp)
pROC::ci.thresholds(roc, specificities = mthreshold)
?ci.sp
?ci.thresholds
roc <- pROC::roc(test.y, test.score, ci = T)
mse <- mean(roc$sensitivities[-c(1, length(roc$sensitivities))])
msp <- mean(roc$specificities[-c(1, length(roc$specificities))])
mthreshold <- mean(roc$thresholds[-c(1, length(roc$thresholds))])
pROC::ci.se(roc, specificities = msp)
pROC::ci.sp(roc, sensitivities = mse)
pROC::ci.thresholds(roc, thresholds = mthreshold)
pROC::ci.thresholds(roc, thresholds = 0.795)
roc <- pROC::roc(test.y, test.score, ci = T)
mean(roc$sensitivities)
mean(roc$specificities)
pROC::ci.thresholds(roc, thresholds = 0.795)
pROC::ci.thresholds(roc)
pROC::ci.thresholds(roc, threshold = 0.795)
roc <- pROC::roc(test.y, test.score, ci = T)
mean(roc$sensitivities)
mean(roc$specificities)
pROC::ci.thresholds(roc, threshold = 0.795)
mean(roc$thresholds)
?mean
mean(roc$thresholds[-c(1,length(roc$thresholds))])
roc <- pROC::roc(test.y, test.score, ci = T)
mean(roc$sensitivities)
mean(roc$specificities)
mean(roc$thresholds[-c(1,length(roc$thresholds))])
pROC::ci.thresholds(roc, threshold = 0.795)
table(test.score>0.726, test.y)
mean(roc$sensitivities)
mean(roc$specificities)
mean(roc$thresholds[-c(1,length(roc$thresholds))])
pROC::ci.thresholds(roc, threshold = 0.726)
pROC::ci.thresholds(roc, threshold = 0.791)
table(test.score>0.791, test.y)
mean((roc$sensitivities+roc$specificities)-1)
